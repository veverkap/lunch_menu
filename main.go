package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"time"
)

type AutoGenerated struct {
	LUNCH []LUNCH `json:"LUNCH"`
}
type LUNCH struct {
	NutrientFactor        int         `json:"NutrientFactor"`
	LastUpdatedOn         time.Time   `json:"LastUpdatedOn"`
	LikesPercentage       float64     `json:"LikesPercentage"`
	AverageRatings        float64     `json:"AverageRatings"`
	Protein               int         `json:"Protein"`
	Milk                  int         `json:"Milk"`
	Vegetable             int         `json:"Vegetable"`
	Grain                 int         `json:"Grain"`
	Fruit                 int         `json:"Fruit"`
	TotalFat              float64     `json:"TotalFat"`
	Carbs                 float64     `json:"Carbs"`
	Calories              int         `json:"Calories"`
	ServingDate           time.Time   `json:"ServingDate"`
	HasServeWith          bool        `json:"HasServeWith"`
	HasImage              bool        `json:"HasImage"`
	AllergenceHasProtein  bool        `json:"AllergenceHasProtein"`
	HasTreeNuts           bool        `json:"HasTreeNuts"`
	HasGluten             bool        `json:"HasGluten"`
	HasFish               bool        `json:"HasFish"`
	HasShellFish          bool        `json:"HasShellFish"`
	AllergenHasMilk       bool        `json:"AllergenHasMilk"`
	HasPeaNuts            bool        `json:"HasPeaNuts"`
	HasSoy                bool        `json:"HasSoy"`
	HasEgg                bool        `json:"HasEgg"`
	HasWheat              bool        `json:"HasWheat"`
	HasProtein            bool        `json:"HasProtein"`
	HasMilk               bool        `json:"HasMilk"`
	HasVegetable          bool        `json:"HasVegetable"`
	HasGrain              bool        `json:"HasGrain"`
	HasFruit              bool        `json:"HasFruit"`
	RatingsCount          int         `json:"RatingsCount"`
	MinimumServed         int         `json:"MinimumServed"`
	PEMenuID              int         `json:"PEMenuId"`
	MenuID                int         `json:"MenuId"`
	PEMenuItemID          int         `json:"PEMenuItemId"`
	MenuItemID            int         `json:"MenuItemId"`
	IsMenuItemFavourite   int         `json:"IsMenuItemFavourite"`
	MyRating              int         `json:"MyRating"`
	ServingSizeByGrade    interface{} `json:"ServingSizeByGrade"`
	ThumbnailImageURL     string      `json:"ThumbnailImageURL"`
	AllergenDisplay       interface{} `json:"AllergenDisplay"`
	DefaultServingSize    string      `json:"DefaultServingSize"`
	SubIngredientsDisplay string      `json:"SubIngredientsDisplay"`
	Allergens             string      `json:"Allergens"`
	Image                 string      `json:"Image"`
	Category              string      `json:"Category"`
	MenuItemDescription   string      `json:"MenuItemDescription"`
}

// Message represents a Telegram message.
type Message struct {
	ChatID int64  `json:"chat_id"`
	Text   string `json:"text"`
}

func main() {
	servingDate := time.Now().AddDate(0, 0, 1).Format("01/02/2006")
	log.Printf("Loading menu for %s", servingDate)

	str := "https://webapis.schoolcafe.com/api/CalendarView/GetDailyMenuitems?SchoolId=ccff3367-7f5f-4a0d-a8cf-89e1afafe4ba&ServingDate=%s&ServingLine=Standard%%20Line&MealType=Lunch"
	str = fmt.Sprintf(str, servingDate)
	log.Printf("URL: %s", str)
	client := &http.Client{}
	req, err := http.NewRequest(http.MethodGet, str, nil)
	if err != nil {
		log.Fatal(err)
	}
	res, err := client.Do(req)
	if err != nil {
		log.Fatal(err)
	}

	if res.Body != nil {
		defer res.Body.Close()
	}

	body, readErr := ioutil.ReadAll(res.Body)
	if readErr != nil {
		log.Fatal(readErr)
	}

	g := AutoGenerated{}
	jsonErr := json.Unmarshal(body, &g)
	if jsonErr != nil {
		log.Fatal(jsonErr)
	}
	lunch := fmt.Sprintf("Lunch for %s\r\n", servingDate)
	for _, v := range g.LUNCH {
		lunch = lunch + "\r\n" + v.MenuItemDescription
	}

	fmt.Println(lunch)
	botToken := "1388326080:AAFGxulzcVRIJwSCcQr1pGjddyOwvC5_Fe0"
	telegram_url := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)
	fmt.Println(telegram_url)

	// Create a new message.
	message := &Message{
		ChatID: -1001675706309,
		Text:   lunch,
	}
	SendMessage(telegram_url, message)
}

// SendMessage sends a message to given URL.
func SendMessage(url string, message *Message) error {
	payload, err := json.Marshal(message)
	if err != nil {
		return err
	}
	response, err := http.Post(url, "application/json", bytes.NewBuffer(payload))
	if err != nil {
		return err
	}
	defer func(body io.ReadCloser) {
		if err := body.Close(); err != nil {
			log.Println("failed to close response body")
		}
	}(response.Body)
	if response.StatusCode != http.StatusOK {
		return fmt.Errorf("failed to send successful request. Status was %q", response.Status)
	}
	return nil
}
